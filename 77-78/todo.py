import sqlite3


class Database:
    def __init__(self, db_name):
        self.db_name = db_name
        self.connection = sqlite3.connect(self.db_name)

    def get_tasks(self, user_id):
        with self.connection as connection:
            cursor = connection.cursor()
            cursor.execute('select * from task where user_id = ?', (user_id, ))
            rows = cursor.fetchall()
            return rows

    def get_task_by_id(self, user_id, task_id):
        with self.connection as connection:
            cursor = connection.cursor()
            cursor.execute('select * from task where user_id = ? and id = ?', (user_id, task_id ))
            row = cursor.fetchone()
            return row

    def add_task(self, name, user_id):
        with self.connection as connection:
            cursor = connection.cursor()
            cursor.execute('insert into task (name, status, user_id) values (?,?,?)', (name, '—Å–¥–µ–ª–∞—Ç—å', user_id))

    def delete_task(self, task_id, user_id):
        with self.connection as connection:
            cursor = connection.cursor()
            res = cursor.execute('delete from task where id = ? and user_id = ?', (task_id, user_id))
            print(res.fetchall())
            
    def update_task(self, task_id):
        with self.connection as connection:
            cursor = connection.cursor()
            cursor.execute("update task set status = '—Å–¥–µ–ª–∞–Ω–æ' where id=?", (task_id,))

    def get_user(self, name, password):
        with self.connection as connection:
            cursor = connection.cursor()
            rows = cursor.execute("select * from user where name = ? and password = ? ", (name, password))
            res = rows.fetchone()
            return res

    def __del__(self):
        print('–ó–∞–∫–∞–Ω—á–∏–≤–∞—é —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π')
        self.connection.close()


class User:
    def __init__(self, name: str, password: str, db: Database):
        self.name = name
        self.password = password
        self.db = db

    def auth(self):
        user = self.db.get_user(self.name, self.password)
        if user:
            return user[0]
        return None

emoji = {'—Å–¥–µ–ª–∞—Ç—å': 'üîµ', '—Å–¥–µ–ª–∞–Ω–æ': 'üü¢'}
db = Database('C:\\Users\\–ë - –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\\Documents\\–ï–≤–¥–æ–∫–∏–º–æ–≤ –ò–ª—å—è\\python-work\\db\\todo.db')


name = input('–í–≤–µ–¥–∏ –∏–º—è: ')
password = input('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å: ')

auth = False

user_id = User(name, password, db).auth()

if user_id:
    auth = True
    print('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
else:
    print('–Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')


while True and auth:
    print('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?')
    print('1 - –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–¥–∞—á–∏')
    print('2 - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
    print('3 - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
    print('4 - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É')

    res = input('–í–≤–æ–¥–∏ –Ω–æ–º–µ—Ä: ')
    if res == '1':
        rows = db.get_tasks(user_id)
        print('\n –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
        for row in rows:
            task_string = f'{row[0]}. {row[1]} - {row[2]}{emoji[row[2]]}'
            print(task_string)
        print('\n')
    elif res == '2':
        name = input('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ')
        db.add_task(name, user_id)
        print('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    elif res == '3':
        task_id = input('–í–≤–µ–¥–∏ id –∑–∞–¥–∞—á–∏: ')
        task = db.get_task_by_id(user_id, task_id)
        if task:
            db.delete_task(task_id, user_id)
            print('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ üòé!')
        else:
            print('–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç')
    elif res == '4':
        task_id = input('–í–≤–µ–¥–∏ id –∑–∞–¥–∞—á–∏: ')
        db.update_task(task_id)
        print('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ üòé!')
    if res == 'q':
        break
